{"version":3,"file":"static/js/535.40af71bd.chunk.js","mappings":"ySAEaA,EAAYC,EAAAA,GAAAA,IAAH,8CAITC,EAAWD,EAAAA,GAAAA,EAAH,4GAORE,EAAgBF,EAAAA,GAAAA,EAAH,4H,SCoD1B,EA1Da,WACX,IAAQG,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA0BE,EAAAA,EAAAA,UAAS,MAAnC,eAAOC,EAAP,KAAcC,EAAd,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KAkBA,OAhBAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAe,mCAAG,2FACtBF,GAAa,GADS,mBAGDG,EAAAA,EAAAA,IAAcT,GAHb,OAGdU,EAHc,OAIpBC,QAAQC,IAAIF,GACZN,GAAS,kBAAMM,EAAKG,IAAX,IALW,gDAOpBC,IAAAA,OAAAA,QAAwB,KAAIC,SAPR,yBASpBT,GAAa,GATO,4EAAH,qDAYrBE,EAAgBR,EACjB,GAAE,CAACA,KAGF,UAACJ,EAAD,YACiB,IAAdS,IAAsB,SAACW,EAAA,EAAD,KACvB,iCACCb,IACC,yBACGA,GAASA,EAAMc,OAAS,IACvB,eAAId,MAAOA,EAAX,SACGA,EAAMe,KAAI,SAAAL,GACT,OACE,2BACE,gBACEM,IACEN,EAAKO,aACD,mCACAP,EAAKO,aACL,kEAENC,IAAKR,EAAKS,KACVC,MAAM,MACNC,OAAO,SAET,SAAC1B,EAAD,UAAWe,EAAKS,QAChB,UAACvB,EAAD,YACE,sCADF,IACqBc,EAAKY,eAdnBZ,EAAKa,GAkBjB,UAOd,C","sources":["components/Cast/Styled.js","components/Cast/Cast.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const CastsInfo = styled.div`\n  margin-left: 50px;\n`;\n\nexport const CastName = styled.p`\n  margin-top: 5px;\n  margin-bottom: 5px;\n  font-size: 20px;\n  font-weight: 500;\n`;\n\nexport const CastCharacter = styled.p`\n  margin-top: 0;\n  margin-bottom: 30px;\n  width: 170px;\n  font-size: 18px;\n  font-weight: 300;\n`;\n","import React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport Notiflix from 'notiflix';\nimport { getMovieCasts } from 'services/Api';\nimport { Loader } from 'components/Loader/Loader';\nimport { CastCharacter, CastName, CastsInfo } from './Styled';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n  const [casts, setCasts] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    const fetchMovieCasts = async () => {\n      setIsLoading(true);\n      try {\n        const data = await getMovieCasts(movieId);\n        console.log(data);\n        setCasts(() => data.cast);\n      } catch (err) {\n        Notiflix.Notify.failure(err.message);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    fetchMovieCasts(movieId);\n  }, [movieId]);\n\n  return (\n    <CastsInfo>\n      {isLoading === true && <Loader />}\n      <h2>Cast</h2>\n      {casts && (\n        <div>\n          {casts && casts.length > 0 && (\n            <ul casts={casts}>\n              {casts.map(cast => {\n                return (\n                  <li key={cast.id}>\n                    <img\n                      src={\n                        cast.profile_path\n                          ? 'https://image.tmdb.org/t/p/w500/' +\n                            cast.profile_path\n                          : 'https://image.tmdb.org/t/p/w500/wwemzKWzjKYJFfCeiB57q3r4Bcm.png'\n                      }\n                      alt={cast.name}\n                      width=\"170\"\n                      height=\"250\"\n                    />\n                    <CastName>{cast.name}</CastName>\n                    <CastCharacter>\n                      <b>Character:</b> {cast.character}\n                    </CastCharacter>\n                  </li>\n                );\n              })}\n            </ul>\n          )}\n        </div>\n      )}\n    </CastsInfo>\n  );\n};\n\nexport default Cast;\n"],"names":["CastsInfo","styled","CastName","CastCharacter","movieId","useParams","useState","casts","setCasts","isLoading","setIsLoading","useEffect","fetchMovieCasts","getMovieCasts","data","console","log","cast","Notiflix","message","Loader","length","map","src","profile_path","alt","name","width","height","character","id"],"sourceRoot":""}