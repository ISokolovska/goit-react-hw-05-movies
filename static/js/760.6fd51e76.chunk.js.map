{"version":3,"file":"static/js/760.6fd51e76.chunk.js","mappings":"ySAEaA,EAAcC,EAAAA,GAAAA,IAAH,8CAIXC,EAAYD,EAAAA,GAAAA,EAAH,4DAKTE,EAAiBF,EAAAA,GAAAA,EAAH,4C,SCoC3B,EAxCgB,WACd,IAAQG,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA8BE,EAAAA,EAAAA,UAAS,MAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KAiBA,OAfAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAiB,mCAAG,WAAMR,GAAN,8EACxBM,GAAa,GADW,mBAGHG,EAAAA,EAAAA,IAAgBT,GAHb,OAGhBU,EAHgB,OAItBN,GAAW,kBAAMM,CAAN,IAJW,gDAMtBC,IAAAA,OAAAA,QAAwB,KAAIC,SANN,yBAQtBN,GAAa,GARS,4EAAH,sDAWvBE,EAAkBR,EACnB,GAAE,CAACA,KAGF,UAACJ,EAAD,YACiB,IAAdS,IAAsB,SAACQ,EAAA,EAAD,KACvB,oCACCV,GAAWA,EAAQW,QAAQC,OAAS,GACnC,wBACGZ,EAAQW,QAAQE,KAAI,SAAAC,GAAM,OACzB,2BACE,wBAAKA,EAAOC,UACZ,SAACnB,EAAD,UAAiBkB,EAAOE,YAFjBF,EAAOG,GADS,OAQ7B,SAACtB,EAAD,yDAIP,C","sources":["components/Reviews/Styled.js","components/Reviews/Reviews.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const ReviewsInfo = styled.div`\n  margin-left: 50px;\n`;\n\nexport const NoReviews = styled.p`\n  font-size: 25px;\n  color: #666;\n`;\n\nexport const ReviewsContent = styled.p`\n  font-size: 18px;\n`;\n","import React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport Notiflix from 'notiflix';\nimport { getMovieReviews } from 'services/Api';\nimport { Loader } from 'components/Loader/Loader';\nimport { NoReviews, ReviewsContent, ReviewsInfo } from './Styled';\n\nconst Reviews = () => {\n  const { movieId } = useParams();\n  const [reviews, setReviews] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    const fetchMovieReviews = async movieId => {\n      setIsLoading(true);\n      try {\n        const data = await getMovieReviews(movieId);\n        setReviews(() => data);\n      } catch (err) {\n        Notiflix.Notify.failure(err.message);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    fetchMovieReviews(movieId);\n  }, [movieId]);\n\n  return (\n    <ReviewsInfo>\n      {isLoading === true && <Loader />}\n      <h2>Reviews</h2>\n      {reviews && reviews.results.length > 0 ? (\n        <ul>\n          {reviews.results.map(result => (\n            <li key={result.id}>\n              <h3>{result.author}</h3>\n              <ReviewsContent>{result.content}</ReviewsContent>\n            </li>\n          ))}\n        </ul>\n      ) : (\n        <NoReviews>We don't have any reviews for this movie</NoReviews>\n      )}\n    </ReviewsInfo>\n  );\n};\n\nexport default Reviews;\n"],"names":["ReviewsInfo","styled","NoReviews","ReviewsContent","movieId","useParams","useState","reviews","setReviews","isLoading","setIsLoading","useEffect","fetchMovieReviews","getMovieReviews","data","Notiflix","message","Loader","results","length","map","result","author","content","id"],"sourceRoot":""}